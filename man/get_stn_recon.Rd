% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_stn_recon.R
\name{get_stn_recon}
\alias{get_stn_recon}
\title{Wrapper that does the neccessary data wrangling before the missing observations
at a station can be reconstructed}
\usage{
get_stn_recon(meta_data, stn_id, search_radius = 20, from_file = TRUE,
  data_dir = NULL, from_ftp = FALSE, delta_window = 30,
  min_overlap = 3 * 365, min_corr_value = 0.6,
  corr_type = "spearman", prcp_var = NULL, dx = 1, dy = 1)
}
\arguments{
\item{meta_data}{standard format from rnoaa}

\item{stn_id}{standard format from GHCN-Daily}

\item{search_radius}{radius to search for neighbouring ids}

\item{from_file}{(default = TRUE) read in precipitation observations from a file.
prcp_var from file must be standard GHCN-Daily format (see rnoaa::meteo_pull_monitors())
The form of the file to be read must also take:
prcp_file = paste(data_dir, "PRCP_xll_", xll, "_yll_", yll, "_dx_", dx, "_dy_", dy, ".rds", sep ="")}

\item{data_dir}{if from_file = TRUE, then this is the data_dir where the files are stored}

\item{from_ftp}{(default = FALSE) read in precipitation observations from the ftp server}

\item{delta_window}{only reconstruct a missing observation, if other
dates in the delta_window have observations}

\item{min_overlap}{minimum nonzero overlap required to get the correlation between two stations}

\item{min_corr_value}{minimum correaltion for a station to be considered a neighbour}

\item{corr_type}{(default = "spearman") or "pearson"}

\item{prcp_var}{hard input the precipitation observations from a elsewhere.
prcp_var must be standard GHCN-Daily format (see rnoaa::meteo_pull_monitors())}

\item{dx}{(default 1) is the x grid spacing of the file to be read}

\item{dy}{(default 1) is the y grid spacing of the file to be read}
}
\value{
Returns a data frame with columns of
date, id, recon_prcp and recon_flag corresponding to the prcp at the station
}
\description{
Wrapper that does the neccessary data wrangling before the missing observations
at a station can be reconstructed
}
\examples{
stn_id = "ASN00040383"
meta_data = readRDS("Data/AS_meta_data.rds")
data_dir = "Data"
xll = meta_data \%>\% filter(id == stn_id) \%>\% select(longitude) \%>\% floor()
yll = meta_data \%>\% filter(id == stn_id) \%>\% select(latitude) \%>\% floor()
dx = dy = 1
prcp_file = paste(data_dir, "/","PRCP_xll_", xll, "_yll_", yll, "_dx_", dx, "_dy_", dy, ".rds", sep ="")
prcp_var = readRDS(prcp_file)
stn_prcp = prcp_var \%>\% filter(id == stn_id)
recon_prcp_file <- get_stn_recon(meta_data, stn_id, search_radius = 3, data_dir = data_dir)
recon_prcp_ftp <- get_stn_recon(meta_data, stn_id, search_radius = 3, from_file = FALSE, from_ftp = TRUE)
#' recon_prcp_ftp <- recon_prcp_ftp \%>\% filter(date \%in\% recon_prcp_file$date)
recon_prcp_var <- get_stn_recon(meta_data, stn_id, search_radius = 3, from_file = FALSE, from_ftp = FALSE, prcp_var = prcp_var)
all(recon_prcp_file == recon_prcp_ftp, na.rm = TRUE)
all(recon_prcp_file == recon_prcp_var, na.rm = TRUE)
combine_prcp = left_join(stn_prcp, recon_prcp_file, by = c("id", "date"))
View(combine_prcp \%>\% filter(is.na(prcp)))
}
